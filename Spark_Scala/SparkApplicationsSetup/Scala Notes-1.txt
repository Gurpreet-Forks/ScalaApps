Scala Notes - 1
-------------
If you want to explore the world of functional programming without compltely disregarding OOP concepts.
It runs on top of JVM ,which means,it has tonne of libraries to use.
Scala is not an interpreted language,its a compiled language.Anything written in shell is converted into a class file, compiled and then executed.

On Windows
Download Scala and run through the setup.
https://www.scala-lang.org/download/

Check environment variables if Scala is setup in the path.
Also ensure if your machine already has Java correctly setup.[Java 1.8]

ON Linux : Setup Scala | Setup Spark Stand-Alone Cluster | Setup Spark with Hadoop Cluster

Scala> REPL (READ EVALUATE PRINT LOOP)
scala> :help
All commands can be abbreviated, e.g., :he instead of :help.
:completions <string>    output completions for the given string
:edit <id>|<line>        edit history
:help [command]          print this summary or command-specific help
:history [num]           show the history (optional num is commands to show)
:h? <string>             search the history
:imports [name name ...] show import history, identifying sources of names
:implicits [-v]          show the implicits in scope
:javap <path|class>      disassemble a file or class name
:line <id>|<line>        place line(s) at the end of history
:load <path>             interpret lines in a file
:paste [-raw] [path]     enter paste mode or paste a file
:power                   enable power user mode
:quit                    exit the interpreter
:replay [options]        reset the repl and replay all previous commands
:require <path>          add a jar to the classpath
:reset [options]         reset the repl to its initial state, forgetting all session entries
:save <path>             save replayable session to a file
:sh <command line>       run a shell command (result is implicitly => List[String])
:settings <options>      update compiler options, if possible; see reset
:silent                  disable/enable automatic printing of results
:type [-v] <expr>        display the type of an expression without evaluating it
:kind [-v] <type>        display the kind of a type. see also :help kind
:warnings                show the suppressed warnings from the most recent line which had any

Examples:
scala> 10 + 3 * 5 /2
res0: Int = 17
(does some computation and assigns to a resident variable. 
 Scala is statically typed dynamically infered language, thus type need not be declared, it is inferred/deciphered)

scala> "your answer" + res0
res1: String = your answer17

scala> val x: Int = 10
x: Int = 10

scala> var MyName = "The Guy"
MyName: String = The Guy
(mutable variable)

scala> val MyName1 = "this guy"
MyName1: String = this guy
(immutable variable/constant)

scala> MyName = "The new Guy"
mutated MyName
(change the value for mutable variable,however type cannot be changed,type is bound to the scope of variable)

scala> MyName1 = "that guy"
               ^
       error: reassignment to val

scala> Myname1 = 30
       ^
       error: not found: value Myname1
(In case of immutable variable, value or type cannot be reassigned)

scala> /*
     | hello this is an example of
     | multiline comment
     | */


Different Datatypes supported in Scala
------------------------
//Byte
//Boolean
//Char
//Short
//Int
//Long
//Float
//Double

We can create doubles ,however they can have 15 digits of precision after which floats loose precision
scala> val num13 = 1.999999999
num13: Double = 1.999999999

we can also create Big Integers
scala> val lgprime = BigInt("34567898765334444499900067578902312345678")
lgprime: scala.math.BigInt = 34567898765334444499900067578902312345678

scala> lgprime + 1
res2: scala.math.BigInt = 34567898765334444499900067578902312345679

we can create big decimal which can hold precision.
scala> val pi50 = BigDecimal("3.14134567899995647384522817")
pi50: scala.math.BigDecimal = 3.14134567899995647384522817

scala> 0.0000000000000000000000000000000000000000 + pi50
res3: scala.math.BigDecimal = 3.14134567899995647384522817

scala> var randInt = 100000
randInt: Int = 100000

scala> randInt.<tab>

(shows different methods which are available,all different datatypes are all objects inside scala which have built in mthods)
!=   <<    abs           getClass        isValidByte    min              toByte        toOctalString   
%    <=    byteValue     intValue        isValidChar    round            toChar        toRadians       
&    ==    ceil          isFinite        isValidInt     self             toDegrees     toShort         
*    >     compare       isInfinite      isValidLong    shortValue       toDouble      unary_+         
+    >=    compareTo     isInfinity      isValidShort   sign             toFloat       unary_-         
-    >>    doubleValue   isNaN           isWhole        signum           toHexString   unary_~         
/    >>>   floatValue    isNegInfinity   longValue      to               toInt         until           
<    ^     floor         isPosInfinity   max            toBinaryString   toLong        |  

scala> var x: Int = 101
x: Int = 101

scala> x = 102
mutated x

scala> val x: String = "hello"
x: String = hello

scala> var x: Float = 10
x: Float = 10.0

scala> val x : Double = 10
x: Double = 10.0

scala> val x: Boolean = true
x: Boolean = true

//without declaring type and type is inferred
scala> val x = true
x: Boolean = true

scala>  val x = {val a = 100; val b = 200 ; a + b}
x: Int = 300

//Last piece of code becomes return value and gives the return type

scala>  val x = {val a = 100; val b = 200 ; "hello"}
x: String = hello

or in multiple lines
scala> val x = {
     | val a = 100
     | val b = 200
     | a + b
     | }
x: Int = 300

Lazy declaration to avoid memory consumption until really in use
scala> val x = 100
x: Int = 100

scala> x * 2
res20: Int = 200

scala> lazy val x = 100
x: Int = <lazy>

scala> x * 2
res21: Int = 200

creating a list
scala> val x = (1 to 1000).toList
x: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 
55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 
82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,...

scala> x.reduce(_ + _ )
res22: Int = 500500

scala> lazy val x = (1 to 1000).toList
x: List[Int] = <lazy>

//in spark RDDs are implicity lazy in nature
=============

Different operators usage:
--------------------------
scala> "5+4 =" + (5+4)
res5: String = 5+4 =9

scala> "5-4 =" + (5-4)
res6: String = 5-4 =1

scala> "5*4 =" + (5*4)
res7: String = 5*4 =20

scala> "5/4 = " + (5/4)
res8: String = 5/4 = 1

scala> "5%4=" + (5%4)
res9: String = 5%4=1

or

scala> randInt++
              ^
       error: value ++ is not a member of Int

scala> randInt--
              ^
       error: value -- is not a member of Int

scala> randInt += 1

scala> randInt
res14: Int = 100001

scala> randInt -= 1

scala> randInt
res16: Int = 100000

scala> randInt *=2

scala> randInt
res18: Int = 200000

scala> randInt /= 2

scala> randInt
res20: Int = 100000

Importing library into repo/terminal
---------------------------------
scala> import scala.math._
import scala.math._

Doing some math operations
scala> abs(-8)
res21: Int = 8

scala> cbrt(3)
res22: Double = 1.4422495703074083

scala> ceil(5.45)
res23: Double = 6.0

scala> round(5.45)
res24: Long = 5

scala> floor(5.46)
res25: Double = 5.0

scala> exp(1)
res26: Double = 2.718281828459045

scala> pow(2,2)
res27: Double = 4.0

scala> sqrt(9)
res28: Double = 3.0

scala> sqrt(pow(2,2)+pow(2,2))
res29: Double = 2.8284271247461903

scala>  hypot(2,2)
res30: Double = 2.8284271247461903

scala> log10(1000)
res31: Double = 3.0

scala> log(2.7182818284590455)
res32: Double = 1.0

scala> min(5,10)
res33: Int = 5

scala> max(100,200)
res34: Int = 200

scala> (random * (11-1)+ 1).toInt
res35: Int = 4

scala> (random * (11-1)+ 1).toInt
res36: Int = 5

scala> toRadians(90)
res37: Double = 1.5707963267948966

scala> toDegrees(1.5707963267948966)
res38: Double = 90.0

Conditional Operators
---------------------
Conditional : == != > < >= <=

Logical Operators
---------------
 && || !

Examples:
scala>  if((age >=5) && (age <= 6)){
     | println("go to kindergarten")
     | } else if((age > 6) && (age <=7)){
     | println("go to grade 1")
     | } else {
     | println("go to grade" + (age - 5))}

go to grade13

scala> true || false
res40: Boolean = true

scala> :q
===============================
Working with files
----------------
While:
C:\Users\Win10>type nul > Code1.scala
C:\Users\Win10>notepad Code1.scala

C:\Users\Win10>type Code1.scala
//Scala Code

C:\Users\Win10>notepad Code1.scala

/*Scala Code*/
object Code1 {
  def main(args: Array[String]){
    var i = 0
    while(i <=10){
    println(i)
     i += 1
   }
  }
}

C:\Users\Win10>scalac Code1.scala
warning: there was one deprecation warning (since 2.13.0); re-run with -deprecation for details
one warning found

C:\Users\Win10>scalac Code1.scala -deprecation
Code1.scala:3: warning: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]){
                               ^
one warning found

C:\Users\Win10>scala Code1.scala
warning: there was one deprecation warning (since 2.13.0); re-run with -deprecation for details
0
1
2
3
4
5
6
7
8
9
10

Correct the error in the file 
/*Scala Code*/
object Code1 {
  def main(args: Array[String]) : Unit ={
    var i = 0
    while(i <=10){
    println(i)
     i += 1
   }
  }
}

C:\Users\Win10>scala Code1.scala
0
1
2
3
4
5
6
7
8
9
10

Using do while loops
--------------
C:\Users\Win10>type nul > Code2.scala

C:\Users\Win10>notepad Code2.scala

/*Scala Code using do*/
object Code2 {
  def main(args: Array[String]) : Unit ={
    var i = 0
    
    do {
      println(i)
     i += 1
   } while (i <= 5)
  }
}

C:\Users\Win10>scalac Code2.scala

C:\Users\Win10>scala Code2.scala
0
1
2
3
4
5
=========================
For loops in scala :

scala> val str = "test"
str: String = test

scala> str.foreach(println)
t
e
s
t

scala> //passing function println in foreach
scala> //string is a collection as a list of characters
scala> //foreach is available for every collection in scala

scala> 1 to 5
res25: scala.collection.immutable.Range.Inclusive = Range 1 to 5

scala> for ( i <- 1 to 5) println(i)
1
2
3
4
5

scala> for ( i <- 5 to 1 by -1) println(i)
5
4
3
2
1

scala> for (i <- 1 to 5; j <- 1 to 4) println(s"($i,$j)")
(1,1)
(1,2)
(1,3)
(1,4)
(2,1)
(2,2)
(2,3)
(2,4)
(3,1)
(3,2)
(3,3)
(3,4)
(4,1)
(4,2)
(4,3)
(4,4)
(5,1)
(5,2)
(5,3)
(5,4)

//for loop with a guard condition
scala> for (i <- 1 to 5; j <- 1 to 4; if i ==j ) println(s"($i,$j)")
(1,1)
(2,2)
(3,3)
(4,4)

scala> for (i <- 1 to 5 if i % 2 == 0 ) println(i)
2
4

//using yield to have output stored in a list
scala> for (i <- 1 to 5 if i % 2 == 0 ) yield(i)
res32: IndexedSeq[Int] = Vector(2, 4)

or store it in a variable
scala> val x = for (i <- 1 to 5 if i % 2 == 0 ) yield(i)
x: IndexedSeq[Int] = Vector(2, 4)

scala> x
res33: IndexedSeq[Int] = Vector(2, 4)
=========
C:\Users\Win10>type nul > Code3.scala

C:\Users\Win10>notepad Code3.scala

/*Scala Code For loop*/
object Code3 {
  def main(args: Array[String]) : Unit ={
    var i = 0
    
    for(i <- 1 to 10)
   println(i)
  }
}

==========================

C:\Users\Win10>type nul > Code4.scala

C:\Users\Win10>notepad Code4.scala

/*Scala Code For loop*/
object Code4 {
  def main(args: Array[String]) : Unit ={
    var i = 0
    val randLetters = "ABCDFGTGHYSDEFHJKILOPMNGSH"
    for ( i <- 0 until randLetters.length
   println(i)
  }
}

==========================
C:\Users\Win10>type nul > Code5.scala

C:\Users\Win10>notepad Code5.scala

/*Scala Code For loop to iterate through a list*/
object Code5 {
  def main(args: Array[String]) : Unit ={
    var i = 0
    val aList = List(1,2,3,4,5)
    for ( i <- aList){
   println("List items" + i)}
  }
}
============
C:\Users\Win10>type nul > Code6.scala

C:\Users\Win10>notepad Code6.scala

/*Scala Code For loop to iterate through a list and use if*/
object Code6 {
  def main(args: Array[String]) : Unit ={
    var i = 0
    val evenList = for{i <- 1 to 20 if (i % 2) == 0 }
    yield i
   for (i <- evenList) println(i)
  }
}

====================
C:\Users\Win10>type nul > Code7.scala

C:\Users\Win10>notepad Code7.scala

/*Scala Code For loop to iterate */
object Code7 {
  def main(args: Array[String]) : Unit ={
    var i = 0
    for (i <- 1 to 5; j <- 6 to 10){
    println("i : " + i)
    println("j : " + j)}
  }
}

====================
Creating function
scala> def areaRect(l: Float, b: Float): Float = { l * b }
areaRect: (l: Float, b: Float)Float

scala> areaRect(10.23f,3f)
res34: Float = 30.689999

//to have function that returns nothing
scala> def areaRect(l: Float, b: Float): Unit = { println(l * b) }
areaRect: (l: Float, b: Float)Unit

scala> areaRect(10.23f,3f)
30.689999


scala> def isEvenNumber(n:Int): Boolean = { n % 2 == 0 }
isEvenNumber: (n: Int)Boolean

scala> isEvenNumber(99)
res39: Boolean = false

or using If-else
scala> def isEvenNumber(n:Int): Boolean = {
     | if(n % 2 == 0 ) true
     | else false
     | }
isEvenNumber: (n: Int)Boolean

scala> isEvenNumber(99)
res40: Boolean = false

NOte** No Breaks or continue in scala,but can implement function for similar functionality

C:\Users\Win10>type nul > Code8.scala

C:\Users\Win10>notepad Code8.scala

/*Scala Code for creating functions */
object Code8 {
  def main(args: Array[String]) : Unit ={
    var i = 0

    def printPrimes(){
    val primeList = List{1,2,3,5,7,11}
    for(i <- primeList){
    if(i == 11) {
	return }
    if(i != 1){
       println(i)
    }}
 	printPrimes
  }}
==========================   
C:\Users\Win10>type nul > Code9.scala

C:\Users\Win10>notepad Code9.scala
/*reading line from command line or console*/  
import scala.io.StdIn.{readLine, readInt}
object Code9 {
  def main(args: Array[String]){
  var numberGuess = 0
   /*readInt readDouble readByte
    readShort readLong */  
do{
   print("Guess a number ")
   numberGuess = readLine.toInt
   } while(numberGuess != 5)
   printf("you guessed right %d\n",5)
}
}
=============================
Other important packages worth importing
import scala.math._
import scala.collection.mutable.ArrayBuffer
import java.io.PrintWriter
import scala.io.Source
======================

C:\Users\Win10>type nul > Code10.scala

C:\Users\Win10>notepad Code10.scala
/*using variables*/
object Code10 {
  def main(args: Array[String]){
  val name = "martin"
  val age = 25
  val weight = 80.5
  println(s"Hello $name")
  println(f"Iam ${$age + 1} and weigh $weight%.2f")

}
}
   
==================
/* Styling characters F with doubles, %c for characters, %d for any different integer types ,f for floating point numbers & s for strings*/
/* right justifications printf("'%5d'\n", 5)
   left justifications printf("'%-5d'\n", 5) */


C:\Users\Win10>type nul > code11.scala

C:\Users\Win10>notepad code11.scala

Test1
Pass name and age from console, read from console and print the values using variables.
Solution:
/*test your code*/
import scala.io.StdIn.{readLine,readInt}
object Code11{
 def main(args: Array[String]){
  println("enter a name:")
  val name = readLine
  println("enter age")
  val age = readInt
  println(s"his name is $name")
  println(s"his age is $age")
  printf("%7s", name)
}
}
==============================
Working with Strings
C:\Users\Win10>type nul > code12.scala

C:\Users\Win10>notepad code12.scala
import scala.io.Source
/*using Strings*/
object Code12 {
 def main(args: Array[String]){
  var randSent = "hi how are you"
  //finding index
  println("indexed element: " + randSent(2))
  //finding string length
  println("String length: " + randSent.length)
  //concatinating
  println(randSent.concat(" and am here"))
  //comparing
  println("are strings equal:" + "hi who are you".equals(randSent))
  //searching
  println("how starts at :" + randSent.indexOf("how"))

}
}
======================
C:\Users\Win10>type nul > code13.scala

C:\Users\Win10>notepad code13.scala

/*using Strings & creating array/
object Code13 {
 def main(args: Array[String]){
  var randSent = "hi how are you"
  val randArrray = randSent.toArray
  for (v <- randArray)
  print(v)

}
}
==================
Functions:
C:\Users\Win10>type nul > code14.scala

C:\Users\Win10>notepad code14.scala

/*Functions*/
//def funcName(param1:dataType,param2:dataType): returnType = {
//function body
//return valueToReturn
//}
object Code14 {
 def main(args: Array[String]){
  def getSum(i: Int,j: Int):Int = { i + j}
  println("5+5:" + getSum(5,5))
  }
}

===========
C:\Users\Win10>type nul > code15.scala

C:\Users\Win10>notepad code15.scala

/*Functions that donot return values or called procedures in scala*/
//def funcName(param1:dataType,param2:dataType): returnType = {
//function body
//return valueToReturn
//}
object Code15 {
 def main(args: Array[String]){
  def sayHi() : Unit = {
  println("HI How are you")
  }
}}
===========
C:\Users\Win10>type nul > code16.scala

C:\Users\Win10>notepad code16.scala

//receiving variable number of arguments ,try in the object
object Code16 {
 def main(args: Array[String]){
  def getSum(args: Int*):Int = { 
      var sum: Int = 0
      for(num <- args){
      sum += num
      } 
      sum 
      }
      println("get sum " + getSum(1,2,3,5,5))
}
}
==============================
Recursion in functions:
C:\Users\Win10>type nul > code17.scala

C:\Users\Win10>notepad code17.scala

//function calling itself

//function calling itself

object Code17 {
 def main(args: Array[String]){
  def factorial(num: BigInt): BigInt = { 
      if(num <= 1)
      1
      else 
      num * factorial(num -1)
      } 
      println("factorial of 4 is :" + factorial(4))
}
}
//1st : num = 4 * factorial(3) = 4 * 6 = 24
//2nd : num = 4 * factorial(2) = 3 * 2 = 6
//3rd : num = 4 * factorial(1) = 2 * 1 = 2
==================
